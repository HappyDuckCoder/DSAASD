Contest 2: 

...............Question1............

a) 4n + 3 + 3/2(n-1)(n-2) + nlog2(n) + 2log2(n)

f(n) = n + [ (n - 1) + (n - 2) + … 1 ] + max(1, log2(n)) * n
 + [ 1 + 2 . log2(n) ] . n 
 + 1 
 + [ 1 + 2(n - 1) + 1 + 2(n -2) + 1 + 2(n-3) + …. + 1 + 1.2 ] 
 + 1 + 2n
      
    = n + (n - 1)(n - 2) / 2 + n . log2(n) 
    = 4n + 3 + 3/2 (n - 1)(n - 2) + (n + 2) . log2(n) 

 ---> O(n^2) 


b) 30 1 2 -1 4 2005 -1 -1 8 -1 2024 -1 -1 -1 14 28 -1 -1 10 -1
c) insertion sort
explain: It’s efficient when elements are mostly in order because it only needs to make small 
adjustments to place each element in its correct position, making it faster than other sorting 
algorithms like Quick Sort or Merge Sort

...............Question2............

// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
// H = 35
// X = 7.5

#include<iostream>
using namespace std;

void quicksort(int a[], int l, int r){
    if(l >= r) return; 

    int i = l, j = r;
    int x = a[(l + r) / 2];
    
    while(i < j){
    	while(a[i] < x) i++;
    	while(a[j] > x) j--;
    	if(i <= j){
    	    swap(a[i],a[j]);
    	    i++;
    	    j--;
    	}
    }

    quicksort(a, l, j);
    quicksort(a, i, r);
}

int lowerbound(int a[], int n, int x){
    if(a[0] > x) return 0; 

    int l = 0, r = n - 1;
    while(l < r){
        int m = (l + r) / 2 + 1;
	    if(a[m] > x) r = m - 1;
        else l = m;
    }

    return l + 1;
}

int main(){
    int n, H, X;
    cin >> n >> H >> X;
   
    int a[n];
    for(int i = 0; i < n; i++) cin >> a[i];
   
    quicksort(a, 0, n - 1);

    int cnt = 0;
    int j = n - 1;

    while(H > 0){
        H -= a[j];
	    j--;
	    cnt++;
    }
   
    int ans_a;
    if(H > 0) ans_a = -1;
    else ans_a = cnt;

    int ans_b = lowerbound(a, n, X);
    // if(ans_b == -1) ans_b = 0;
 
    cout << "ans a: " << ans_a << "\n";
    cout << "ans b: " << ans_b << "\n";

    return 0; 
}


...............Question3............

#include<iostream>
#include<cmath>
#include<stack>
#include<queue>
using namespace std;

bool checkParentheses(string exp){
    stack<char> st;
    
    for(int i = 0; i < exp.length(); i++){
        if(exp[i] == '(')
            st.push(exp[i]);
        else if(exp[i] == ')'){
            if(st.empty()) return false;
            else st.pop();
        }
        else continue;
    }
    
    if(st.empty()) return true;
    else return false;
}

bool checkOperator(char operatorA, char operatorB){
    string level1 = "+-";
    string level2 = "*/";
    string level3 = "^";

    int checkLevelA;
    if(operatorA == level1[0] || operatorA == level1[1]) 
	    checkLevelA = 1;
    else if(operatorA == level2[0] || operatorA == level2[1])
	    checkLevelA = 2;
    else if(operatorA == level3[0])
	    checkLevelA = 3;
    else return 0;

    int checkLevelB;
    if(operatorB == level1[0] || operatorB == level1[1]) 
	    checkLevelB = 1;
    else if(operatorB == level2[0] || operatorB == level2[1])
	    checkLevelB = 2;
    else if(operatorB == level3[0])
	    checkLevelB = 3;
    else return 0;

   if(checkLevelA >= checkLevelB) return true;
   else return false;
}


// b) 
queue<char> getRPN(string exp){
    queue<char> qu;
    stack<char> st;

    for(int i = 0; i < exp.length(); i++){
    	if(exp[i] == '('){
    	    st.push(exp[i]);
    	}
    	else if(exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/' || exp[i] == '^'){
    	    while(!st.empty() && checkOperator(st.top(), exp[i])){
    		    qu.push(st.top());
    		    st.pop();
    	    }
    	    st.push(exp[i]);
    	}
    	else if(exp[i] >= '0' && exp[i] <= '9'){
    	    qu.push(exp[i]); 
    	}
    	else if(exp[i] == ')'){
            while(!st.empty() && st.top() != '('){
                qu.push(st.top());
                st.pop();
            }
            st.pop();
        }
    }

    while(!st.empty()){
        qu.push(st.top());
        st.pop();
    }

    return qu;
}

// c) 
int calc(queue<char> q){
    stack<int> st;
     
    while(!q.empty()){
        if(q.front() >= '0' && q.front() <= '9'){
            st.push(q.front() - '0');
            // q.pop(); 
        }
        else {
            if(q.front() == '+'){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b + a);
            }
            else if(q.front() == '-'){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b - a);
            }
            else if(q.front() == '*'){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b * a);
            }
            else if(q.front() == '/'){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b / a);
            }
            else if(q.front() == '^'){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(pow(b, a));
            }
        }

        q.pop();
    }

    int res = st.top();
    st.pop();
    return res;
}

int main(){
    
    string exp;
    cin >> exp;
    
    queue<char> res = getRPN(exp);
    cout << calc(res) << "hihi\n";
    while(!res.empty()){
        cout << res.front() << " ";
        res.pop();
    }
    
    
    return 0;
}



...............Question3............
Word|PartOfSpeech|Definition

a)
struct Word{
     string name;
     string part;
     string definition;
};

b)
void readFile(Word words[], int &nWord){
    char filename[50] = "englishApp.txt";
    fstream fin;
    fin.open(filename, ios::in);

    nWord = 0;
    while(!fin.eof()){
        getline(fin, words[nWord].name, '|');
        getline(fin, words[nWord].part, '|');
        getline(fin, words[nWord].definition);
        nWord++;
    }

    fin.close();
}

c) 
decribe: create hashtable[1000] for saving the name of the word
each different word will occupied by the empty place 
if there are several words have the same name but different the other elements, use linearhashing for handle collision

code: 
Word hashtable[1000];
string sup-hash[1000] = {""};

void HASH(Word words[], int nWord){
    for(int i = 0; i < nWord; i++){
	if(sup-hash[i] == ""){
	    hashtable[i] = words[i];
	    sub-hash[i] = words[i].name;
	} else {
	    int index = i + 1;
	    while(sub-hash[i] != ""){
            index = (index + 1) % 1000;
	    } 
        sub-hash[index] = words[i].name;
        hashtable[index] = words[i];
    }
}

giving: Word hashtable[1041], string sub-hash[1041]
decribe: create hash function follow these steps: 
- if(words[i].name[0] == A) --> store in boxex: 1, 1 + 26 * 1, 1 + 26 * 2
- do the same with B, C, D 

code: hash(words[i]) = ( (int)words[i].name[0] + i * 26 ) % 1041;

